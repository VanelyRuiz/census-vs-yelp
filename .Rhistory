colors <- c('rgb(211,94,96)', 'rgb(128,133,133)', 'rgb(144,103,167)', 'rgb(171,104,87)', 'rgb(114,147,203)')
p <- plot_ly(data, labels = ~Categorie, values = ~X1960, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$', X1960, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
library(plotly)
USPersonalExpenditure <- data.frame("Categorie" = rownames(USPersonalExpenditure), USPersonalExpenditure)
data <- USPersonalExpenditure[, c('Categorie', 'X1960')]
colors <- c('rgb(211,94,96)', 'rgb(128,133,133)', 'rgb(144,103,167)', 'rgb(171,104,87)', 'rgb(114,147,203)')
p <- plot_ly(data, labels = ~Categorie, values = ~X1960, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$', X1960, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
library(plotly)
USPersonalExpenditure <- data.frame("Categorie" = rownames(USPersonalExpenditure), USPersonalExpenditure)
data <- USPersonalExpenditure[, c('Categorie', 'X1960')]
colors <- c('rgb(211,94,96)', 'rgb(128,133,133)', 'rgb(144,103,167)', 'rgb(171,104,87)', 'rgb(114,147,203)')
p <- plot_ly(data, labels = ~Categorie, values = ~X1960, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('$', X1960, ' billions'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
runApp()
world <- map("world", fill = T, plot = F)
View(world)
View(world)
world <- map("state", fill = T, plot = F)
View(world)
View(world)
world <- map("state", fill = T, plot = F)
View(world)
world <- map("USA", fill = T, plot = F)
world <- map("county", fill = T, plot = F)
View(world)
world <- map("county", "washington" fill = T, plot = F)
world <- map("county", "washington", fill = T, plot = F)
View(world)
world[["names"]]
View(world)
runApp()
install.packages(randomcoloR
)
install.packages("randomcoloR")
library(randomcoloR)
test <- randomColor(2)
test <- randomColor(39)
runApp()
library(shiny)
library(dplyr)
library(ggplot2)
library(randomcoloR)
test <- randomColor(39)
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.income <- read.csv("data/income.csv", stringsAsFactors = F)
# Define server logic required
shinyServer(function(input, output) {
filtered <- reactive({
if(input$parameter.key == "Overview"){
test.run <- input$parameter.key
} else if(input$parameter.key == "Income"){
test.run <- input$parameter.key
} else if(input$parameter.key == "Crime Rate") {
test.run <- input$parameter.key
} else if(input$parameter.key == "Ethnicity") {
data.table <-
test.run <- input$parameter.key
} else {
test.run <- paste(input$parameter.key, "change")
}
return(test.run)
})
# Return the rendered Test Text
output$out.text <- renderText({
return( paste(filtered()) )
})
# Creates Base Map
output$base.map <- renderPlot({
states <- map_data("state")
west_coast <- subset(states, region %in% c("washington"))
only_wa <- subset(states, region == "washington")
all.counties <- map_data("county")
washington_county <- subset(all.counties, region == "washington")
head(washington_county)
create_base <- ggplot(data = only_wa, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "white") #color = perimeter of map , fill = whole map color fill
final_base <- create_base + theme_nothing() +
geom_polygon(data = washington_county, fill = test, color = "red") + # color = color of county outline
geom_polygon(color = "black", fill = NA) # color = perimeter of map that should be kept same as previous color
return(final_base)
})
})
states <- map_data("state")
west_coast <- subset(states, region %in% c("washington"))
only_wa <- subset(states, region == "washington")
all.counties <- map_data("county")
washington_county <- subset(all.counties, region == "washington")
head(washington_county)
create_base <- ggplot(data = only_wa, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "white") #color = perimeter of map , fill = whole map color fill
final_base <- create_base + theme_nothing() +
geom_polygon(data = washington_county, fill = test, color = "red") + # color = color of county outline
geom_polygon(color = "black", fill = NA) # color = peri
View(washington_county)
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.income <- read.csv("data/income.csv", stringsAsFactors = F)
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.income <- read.csv("data/income.csv", stringsAsFactors = F)
View(data.race)
View(data.income)
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.income <- read.csv("data/income.csv", stringsAsFactors = F)
View(data.income)
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.income <- read.csv("data/income.csv", stringsAsFactors = F)
test <- c(randomColor(39))
county.name <- c(data.income$County)
final.frame <- data.frame(county.name, test, stringsAsFactors = F)
View(final.frame)
final.fuck <- data.frame(data.income$County, randomColor(39), stringsAsFactors = F)
View(final.fuck)
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.income <- read.csv("data/income.csv", stringsAsFactors = F)
color.frame <- data.frame(data.income$County, randomColor(39), stringsAsFactors = F)
View(color.frame)
help(join)
library(shiny)
library(dplyr)
library(ggplot2)
library(randomcoloR)
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.income <- read.csv("data/income.csv", stringsAsFactors = F)
color.frame <- data.frame(data.income$County, randomColor(39), stringsAsFactors = F)
# Define server logic required
shinyServer(function(input, output) {
filtered <- reactive({
if(input$parameter.key == "Overview"){
test.run <- input$parameter.key
} else if(input$parameter.key == "Income"){
test.run <- input$parameter.key
} else if(input$parameter.key == "Crime Rate") {
test.run <- input$parameter.key
} else if(input$parameter.key == "Ethnicity") {
data.table <-
test.run <- input$parameter.key
} else {
test.run <- paste(input$parameter.key, "change")
}
return(test.run)
})
# Return the rendered Test Text
output$out.text <- renderText({
return( paste(filtered()) )
})
# Creates Base Map
output$base.map <- renderPlot({
states <- map_data("state")
west_coast <- subset(states, region %in% c("washington"))
only_wa <- subset(states, region == "washington")
all.counties <- map_data("county")
washington_county <- subset(all.counties, region == "washington")
head(washington_county)
create_base <- ggplot(data = only_wa, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "white") #color = perimeter of map , fill = whole map color fill
final_base <- create_base + theme_nothing() +
geom_polygon(data = washington_county, fill = test, color = "red") + # color = color of county outline
geom_polygon(color = "black", fill = NA) # color = perimeter of map that should be kept same as previous color
return(final_base)
})
})
library(shiny)
library(dplyr)
library(ggplot2)
library(randomcoloR)
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.income <- read.csv("data/income.csv", stringsAsFactors = F)
color.frame <- data.frame(data.income$County, randomColor(39), stringsAsFactors = F)
# Define server logic required
shinyServer(function(input, output) {
filtered <- reactive({
if(input$parameter.key == "Overview"){
test.run <- input$parameter.key
} else if(input$parameter.key == "Income"){
test.run <- input$parameter.key
} else if(input$parameter.key == "Crime Rate") {
test.run <- input$parameter.key
} else if(input$parameter.key == "Ethnicity") {
data.table <-
test.run <- input$parameter.key
} else {
test.run <- paste(input$parameter.key, "change")
}
return(test.run)
})
# Return the rendered Test Text
output$out.text <- renderText({
return( paste(filtered()) )
})
# Creates Base Map
output$base.map <- renderPlot({
states <- map_data("state")
west_coast <- subset(states, region %in% c("washington"))
only_wa <- subset(states, region == "washington")
all.counties <- map_data("county")
washington_county <- subset(all.counties, region == "washington")
head(washington_county)
create_base <- ggplot(data = only_wa, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "white") #color = perimeter of map , fill = whole map color fill
final_base <- create_base + theme_nothing() +
geom_polygon(data = washington_county, fill = test, color = "red") + # color = color of county outline
geom_polygon(color = "black", fill = NA) # color = perimeter of map that should be kept same as previous color
return(final_base)
})
})
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.income <- read.csv("data/income.csv", stringsAsFactors = F)
color.frame <- data.frame(data.income$County, randomColor(39), stringsAsFactors = F)
# Define server logic required
shinyServer(function(input, output) {
filtered <- reactive({
if(input$parameter.key == "Overview"){
test.run <- input$parameter.key
} else if(input$parameter.key == "Income"){
test.run <- input$parameter.key
} else if(input$parameter.key == "Crime Rate") {
test.run <- input$parameter.key
} else if(input$parameter.key == "Ethnicity") {
data.table <-
test.run <- input$parameter.key
} else {
test.run <- paste(input$parameter.key, "change")
}
return(test.run)
})
# Return the rendered Test Text
output$out.text <- renderText({
return( paste(filtered()) )
})
# Creates Base Map
output$base.map <- renderPlot({
states <- map_data("state")
west_coast <- subset(states, region %in% c("washington"))
only_wa <- subset(states, region == "washington")
all.counties <- map_data("county")
washington_county <- subset(all.counties, region == "washington")
head(washington_county)
create_base <- ggplot(data = only_wa, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "white") #color = perimeter of map , fill = whole map color fill
final_base <- create_base + theme_nothing() +
geom_polygon(data = washington_county, fill = test, color = "red") + # color = color of county outline
geom_polygon(color = "black", fill = NA) # color = perimeter of map that should be kept same as previous color
return(final_base)
})
})
states <- map_data("state")
west_coast <- subset(states, region %in% c("washington"))
only_wa <- subset(states, region == "washington")
all.counties <- map_data("county")
washington_county <- subset(all.counties, region == "washington")
head(washington_county)
create_base <- ggplot(data = only_wa, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "white") #color = perimeter of map , fill = whole map color fill
final_base <- create_base + theme_nothing() +
geom_polygon(data = washington_county, fill = test, color = "red") + # color = color of county outline
geom_polygon(color = "black", fill = NA) # color = perimeter of map that should be kept same as previous color
View(washington_county)
View(color.frame)
left_join(washington_county, color.frame, by = NULL, copy = FALSE )
View(color.frame)
color.frame <- data.frame(data.income$County, randomColor(39), stringsAsFactors = F)
colnames(color.frame) <- c("subregion", "color")
View(color.frame)
left_join(washington_county, color.frame, by = NULL, copy = FALSE )
View(washington_county)
View(washington_county)
washington_county <- left_join(washington_county, color.frame, by = NULL, copy = FALSE )
View(washington_county)
washington_county <- left_join(washington_county, color.frame)
View(washington_county)
View(washington_county)
washington_county <- inner_join(washington_county, color.frame)
View(washington_county)
washington_county <- left_join(washington_county, color.frame)
washington_county <- left_join(washington_county, color.frame, by = subregion)
washington_county <- left_join(washington_county, color.frame, by = "subregion")
washington_county <- left_join(washington_county, color.frame, by = "subregion")
View(washington_county)
all.counties <- map_data("county")
washington_county <- subset(all.counties, region == "washington")
head(washington_county)
washington_county <- left_join(washington_county, color.frame, by = "subregion")
washington_county <- left_join(washington_county, color.frame, by = NULL)
View(washington_county)
washington_county <- left_join( color.frame, washington_county, by = NULL)
View(washington_county)
washington_county <- full_join(washington_county, color.frame,  by = NULL)
all.counties <- map_data("county")
washington_county <- subset(all.counties, region == "washington")
head(washington_county)
washington_county <- full_join(washington_county, color.frame,  by = NULL)
View(washington_county)
states <- map_data("state")
west_coast <- subset(states, region %in% c("washington"))
only_wa <- subset(states, region == "washington")
all.counties <- map_data("county")
washington_county <- subset(all.counties, region == "washington")
head(washington_county)
washington_county <- left_join(washington_county, color.frame,  by = NULL)
View(washington_county)
View(washington_county)
washington_county <- left_join(washington_county, color.frame)
View(washington_county)
washington_county <- left_join(washington_county, color.frame, by="subregion")
View(washington_county)
View(washington_county)
View(color.frame)
View(washington_county)
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.income <- read.csv("data/income.csv", stringsAsFactors = F)
color.frame <- data.frame(data.income$County, randomColor(39), stringsAsFactors = F)
colnames(color.frame) <- c("subregion", "color")
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.income <- read.csv("data/income.csv", stringsAsFactors = F)
color.frame <- data.frame(data.income$County, randomColor(39), stringsAsFactors = F)
colnames(color.frame) <- c("subregion", "color")
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.income <- read.csv("data/income.csv", stringsAsFactors = F)
color.frame <- data.frame(data.income$County, randomColor(39), stringsAsFactors = F)
colnames(color.frame) <- c("subregion", "color")
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.income <- read.csv("data/income.csv", stringsAsFactors = F)
color.frame <- data.frame(data.income$County, randomColor(39), stringsAsFactors = F)
colnames(color.frame) <- c("subregion", "color")
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.income <- read.csv("data/income.csv", stringsAsFactors = F)
color.frame <- data.frame(data.income$County, randomColor(39), stringsAsFactors = F)
colnames(color.frame) <- c("subregion", "color")
View(data.income)
View(washington_county)
washington_county <- left_join(washington_county, color.frame)
View(washington_county)
output$base.map <- renderPlot({
states <- map_data("state")
west_coast <- subset(states, region %in% c("washington"))
only_wa <- subset(states, region == "washington")
all.counties <- map_data("county")
washington_county <- subset(all.counties, region == "washington")
head(washington_county)
washington_county <- left_join(washington_county, color.frame)
create_base <- ggplot(data = only_wa, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "white") #color = perimeter of map , fill = whole map color fill
final_base <- create_base + theme_nothing() +
geom_polygon(data = washington_county, fill = test, color = "red") + # color = color of county outline
geom_polygon(color = "black", fill = NA) # color = perimeter of map that should be kept same as previous color
return(final_base)
output$base.map <- renderPlot({
states <- map_data("state")
west_coast <- subset(states, region %in% c("washington"))
only_wa <- subset(states, region == "washington")
all.counties <- map_data("county")
washington_county <- subset(all.counties, region == "washington")
head(washington_county)
washington_county <- left_join(washington_county, color.frame)
create_base <- ggplot(data = only_wa, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "white") #color = perimeter of map , fill = whole map color fill
final_base <- create_base + theme_nothing() +
geom_polygon(data = washington_county, fill = test, color = "red") + # color = color of county outline
geom_polygon(color = "black", fill = NA) # color = perimeter of map that should be kept same as previous color
return(final_base)
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.income <- read.csv("data/income.csv", stringsAsFactors = F)
color.frame <- data.frame(data.income$County, randomColor(39), stringsAsFactors = F)
colnames(color.frame) <- c("subregion", "color")
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.income <- read.csv("data/income.csv", stringsAsFactors = F)
color.frame <- data.frame(data.income$County, randomColor(39), stringsAsFactors = F)
colnames(color.frame) <- c("subregion", "color")
library(shiny)
library(dplyr)
library(ggplot2)
library(randomcoloR)
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.income <- read.csv("data/income.csv", stringsAsFactors = F)
color.frame <- data.frame(data.income$County, randomColor(39), stringsAsFactors = F)
colnames(color.frame) <- c("subregion", "color")
# Define server logic required
shinyServer(function(input, output) {
filtered <- reactive({
if(input$parameter.key == "Overview"){
test.run <- input$parameter.key
} else if(input$parameter.key == "Income"){
test.run <- input$parameter.key
} else if(input$parameter.key == "Crime Rate") {
test.run <- input$parameter.key
} else if(input$parameter.key == "Ethnicity") {
data.table <-
test.run <- input$parameter.key
} else {
test.run <- paste(input$parameter.key, "change")
}
return(test.run)
})
# Return the rendered Test Text
output$out.text <- renderText({
return( paste(filtered()) )
})
# Creates Base Map
output$base.map <- renderPlot({
states <- map_data("state")
west_coast <- subset(states, region %in% c("washington"))
only_wa <- subset(states, region == "washington")
all.counties <- map_data("county")
washington_county <- subset(all.counties, region == "washington")
head(washington_county)
washington_county <- left_join(washington_county, color.frame)
create_base <- ggplot(data = only_wa, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "white") #color = perimeter of map , fill = whole map color fill
final_base <- create_base + theme_nothing() +
geom_polygon(data = washington_county, fill = test, color = "red") + # color = color of county outline
geom_polygon(color = "black", fill = NA) # color = perimeter of map that should be kept same as previous color
return(final_base)
})
})
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
library(shiny)
library(dplyr)
library(ggplot2)
library(randomcoloR)
data.race <- read.csv("data/race.csv", stringsAsFactors = F)
data.income <- read.csv("data/income.csv", stringsAsFactors = F)
color.frame <- data.frame(data.income$County, randomColor(39), stringsAsFactors = F)
colnames(color.frame) <- c("subregion", "color")
# Define server logic required
shinyServer(function(input, output) {
filtered <- reactive({
if(input$parameter.key == "Overview"){
test.run <- input$parameter.key
} else if(input$parameter.key == "Income"){
test.run <- input$parameter.key
} else if(input$parameter.key == "Crime Rate") {
test.run <- input$parameter.key
} else if(input$parameter.key == "Ethnicity") {
data.table <-
test.run <- input$parameter.key
} else {
test.run <- paste(input$parameter.key, "change")
}
return(test.run)
})
# Return the rendered Test Text
output$out.text <- renderText({
return( paste(filtered()) )
})
# Creates Base Map
output$base.map <- renderPlot({
states <- map_data("state")
west_coast <- subset(states, region %in% c("washington"))
only_wa <- subset(states, region == "washington")
all.counties <- map_data("county")
washington_county <- subset(all.counties, region == "washington")
head(washington_county)
washington_county <- left_join(washington_county, color.frame)
create_base <- ggplot(data = only_wa, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "white") #color = perimeter of map , fill = whole map color fill
final_base <- create_base + theme_nothing() +
geom_polygon(data = washington_county, fill = test, color = "red") + # color = color of county outline
geom_polygon(color = "black", fill = NA) # color = perimeter of map that should be kept same as previous color
return(final_base)
})
})
runApp()
